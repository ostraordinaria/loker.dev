generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model DeveloperProfile {
  id              String                @id @default(cuid())
  profileId       String
  profile         Profile               @relation(fields: [profileId], references: [id])
  bio             String                @db.Text
  education       String?
  repoUrl         String?
  personalSiteUrl String?
  locationId      String?
  availability    DeveloperAvailability @default(ACTIVELY_LOOKING)
  location        Location?             @relation(fields: [locationId], references: [id])
  projects        Project[]

  @@unique([profileId])
  @@index([profileId])
  @@index([locationId])
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id               String             @id @default(cuid())
  remote           Boolean            @default(false)
  city             String?
  province         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  developerProfile DeveloperProfile[]
  recruiterProfile RecruiterProfile[]
}

model Profile {
  id               String            @id @default(cuid())
  user             User              @relation(fields: [userId], references: [id])
  userId           String            @unique
  name             String
  developerProfile DeveloperProfile?
  recruiterProfile RecruiterProfile?

  @@index([userId])
}

model Project {
  id                String           @id @default(cuid())
  name              String
  developerId       String
  developerProfiles DeveloperProfile @relation(fields: [developerId], references: [id])
  summary           String           @db.Text
  url               String

  @@index([developerId])
}

model RecruiterProfile {
  id              String    @id @default(cuid())
  profileId       String
  profile         Profile   @relation(fields: [profileId], references: [id])
  contact         String
  companyName     String
  companySize     String
  companyIndustry String
  website         String
  bio             String
  location        Location? @relation(fields: [locationId], references: [id])
  locationId      String?

  @@unique([profileId])
  @@index([profileId])
  @@index([locationId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum DeveloperAvailability {
  ACTIVELY_LOOKING
  CASUALLY_LOOKING
  NOT_OPEN
}
